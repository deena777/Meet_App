*Problem Statement*

- The app connects tech enthusiasts who like to share their ideas with the world. 
  Using this app event organizers can create the upcoming event and members can book their slots for the events. 
- The end-users for this Python app will be 
  - Event Organizer 
  - Member


*Application Details*

1. Login/Register Functionality: 

    - User should be able to register as an Organizer or a Member 
    - Users should be able to log in using Email and Password 
    - Post login if the user is an organizer then show the following menu: 
    - Create Event 
    - View Event List - Show the list of all the events created by the logged-in organizer 
    - View Event Details 
    - Update Event -  It should update based on the EventID. 
    - Delete Event - It should delete based on the EventID. 
    - Logout 
    - Post login if the user is a member then show the following menu: 
    - View Registered Events: 
        - Show the list of all the registered events by the logged-in user. 
        - The list should contain only the ongoing and upcoming events. 
    - Register for an event. 
    - View Event Details - It should show details based on the EventID. 
    - Update Password - Request the user to enter the new password. 
    - Logout 


2. Event Listing Functionality: 

    - Only the ongoing and upcoming events should be displayed on the event listing page. 
    - Ongoing events are the ones that have started date-time in the past and end DateTime in the future. For example, 
    the current datetime is 22 Jan 2022 13:00:00 and event start is 22 Jan 2022 09:00:00 and 
    the end is 22 Jan 2022 17:00:00 then this event is ongoing. 
    - Upcoming events are all the events with start date-time more than the current date-time. For example, 
    the current date-time is 22 Jan 2022 13:00:00 and event start is 23 Jan 2022 11:00:00 and 
    the end is 24 Jan 2022 17:00:00 then this event is upcoming. 
    - Events created by the logged-in organizer should be displayed to him/her and not from all the organizers. 
    - For each event following details need to be displayed 
    - EventID - Autogenerated value to uniquely identify an event. 
    - Name 
    - Organizer Start Date - The scheduled start date of the event. 
    - Start Time - The scheduled start time of the event. 
    - End Date - The scheduled end date of the event. 
    - End Time - The scheduled end time of the event.
    - Total users registered 
    - Seats available 

3. Create Events Functionality: 
    
    - The organizer should be able to create an event by providing the event details. They need to provide the 
        following details: 
        - Name 
        - Start Date - The scheduled start date of the event. 
        - Start Time - The scheduled start time of the event. 
        - End Date - The scheduled end date of the event. 
        - End Time - The scheduled end time of the event. 
        - Total Seats - Total capacity of the events. 
    - EventID should be generated automatically. 


   
4. Update Events Functionality: 
    - The organizer should be able to update an event by providing the EventID. They can update the following details: 
    - Name 
    - Start Date - The scheduled start date of the event. 
    - Start Time - The scheduled start time of the event. 
    - End Date - The scheduled end date of the event. 
    - End Time - The scheduled end time of the event. 
    - EventID cannot be updated. 
    - Total Seats cannot be updated. 


5. Event Details Functionality: 
    - The event details should be displayed based on the EventID. 
    - The following details need to be displayed 
    - EventID - Autogenerated value to uniquely identify an event. 
    - Name Organizer Start Date - The scheduled start date of the event. 
    - Start Time - The scheduled start time of the event. 
    - End Date - The scheduled end date of the event. 
    - End Time - The scheduled end time of the event. 
    - Total Seats - Total capacity of the events. 
    - Seats Available - Number of available seats for registration 


6. Event Registration: 
    - Users should be able to register for the event from the list of events. The list should show the following info 
    - EventID - Autogenerated value to uniquely identify an event. 
    - Name 
    - Organizer 
    - Start Date - The scheduled start date of the event. 
    - Start Time - The scheduled start time of the event. 
    - End Date - The scheduled end date of the event. 
    - End Time - The scheduled end time of the event. 
    - Total Seats - Total capacity of the events. 
    - Seats Available - Number of available seats for registration 
    - Users cannot register if all the seats are filled



*Common Functionalities:*

- Login - Both organizer and member can log in to the application.
- Registration: 
  a. By default one organizer is available with the following credentials - email: admin@edyoda.com and password: admin. 
- If any of the validations fail then show appropriate error messages. For example, 
  if someone tries to enter a name in place of a contact number then an error should be displayed saying, 
  “Please enter a valid contact number”. 
- You have to use the given JSON files for handling data.




*What is already implemented in the base project?*

- Registration functionality for both Organizer and Member is implemented 
- Login Functionality for both Organizer and Member is implemented. 
- Commandline functionality is already implemented. DO NOT make changes to this file. 
- Helper functions are also provided wherever necessary. 
- You can take reference from previously implemented functionalities.




*What do you have to implement in the project for submission?*

- Implement all the remaining functionalities 
- Please ensure that you update the data in the JSON files. Test cases will verify the JSON files. 
  Even if your functionality is working but you haven’t updated the JSON file correctly then the test case will fail 
  and you will not receive any marks. 
- All the Organizer related data will be managed inside organizers.json file. Sample JSON object for organizer: 


{
"Full Name": "Admin Cypher",
"Email": "CameraAtB@gmail.com",
"Password": "CameraatA"
}
All the Members related data will be managed inside members.json file. Sample JSON object for member:
{
"Full Name": "Omen Kumar",
"Email": "omenteleport@gmail.com",
"Password": "BlindAtB"
}
All the Events related data will be managed inside events.json file. Sample JSON object for event:
{
"ID": "KWG",
"Name": "Haven",
"Organizer": "Admin Skye",
"Start Date": "2022-01-25",
"Start Time": "10:40:00",
"End Date": "2022-01-25",
"End Time": "14:40:00",
"Users Registered": ["Brimstone Sharma", "aditya M"],
"Capacity": 50,
"Seats Available": 48
}


Instructions for Code Execution:

1. Running the application in Terminal/Command Prompt: 

    - Click on Terminal in the top menu 
    - Click on “Open Terminal in Specific Machine” 
    - Click on “Applications Machine” 
    - Goto Projects folder by running the following command “cd Project” 
    - Open commandline.py file by running the following command “python3 commandline.py” 

2. Tips: 

    - When you run the project using the above command of commandline, if you encounter any error then you can read the error,
    open the commandline.py file, see for which function are you getting that error, then open the same function in 
    operations.py file and fix it. 
    
3. Test Cases: 

    - After you make sure that your code/functionality is working fine and is complete, run the Test Cases from the sidebar.






*Important Instructions:*
- Please ensure that you DO NOT COPY the code from your batch mates or the internet. Our proctoring tool will detect 
  plagiarism and you will receive zero marks in the exam. 
- Please DO NOT share your code publicly. If anyone copies your code then both you and the other person will receive 
  zero marks.